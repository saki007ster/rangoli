/*
 *
 *  Rangoli App
 */
(function() {
  'use strict';

  var Aarti = function() {
    // The Horn Player.

    var audioSrc = '/rangoli/dist/sounds/rangoli.mp3';
    var noAudioContext = false;
    var fallbackAudio;
    var audioCtx = (window.AudioContext || window.webkitAudioContext);
    var self = this;
    var source;
    var buffer;

    if (audioCtx !== undefined) {
      audioCtx = new audioCtx();
    } else  {
      noAudioContext = true;
      fallbackAudio = document.createElement('audio');
    }

    var loadSound = function(callback) {
      callback = callback || function() {};

      if (noAudioContext) {
        fallbackAudio.src = audioSrc;
        return;
      }

      if(!!buffer == true) {
        // If the buffer is already loaded, use that.
        callback(buffer);
        return;
      }

      var xhr = new XMLHttpRequest();

      xhr.onload = function() {
        audioCtx.decodeAudioData(xhr.response, function(decodedBuffer) {
          callback(decodedBuffer);
        });
      };

      xhr.open('GET', audioSrc);
      xhr.responseType = 'arraybuffer';
      xhr.send();
    };


    this.start = function(opts) {
      var shouldLoop = opts.loop; // always loop if from an event.

      if (noAudioContext) {
        fallbackAudio.loop = shouldLoop;
        fallbackAudio.currentTime = 0;
        fallbackAudio.play();
        return;
      }

      loadSound(function(tmpBuffer) {
        source = audioCtx.createBufferSource();

        source.connect(audioCtx.destination);

        source.buffer = tmpBuffer;

        source.onended = function () {
          self.stop();
        };

        source.start(0);
        source.loop = shouldLoop;
        source.loopStart = 0.24;
        source.loopEnd = 0.34;

      });
    };

    this.stop = function() {
      if(!!source === true)
        source.loop = false;

      if (noAudioContext) {
        fallbackAudio.loop = false;
        fallbackAudio.pause();
      }
      this.onstopped();
    };

    this.onstopped = function() {
      self.stop();
    };

    var init = function() {

      loadSound(function(decodedBuffer) {
        buffer = decodedBuffer;
      });
    };

    init();

  };

  var Installer = function(root) {

    var tooltip = root.querySelector('.tooltip');

    var install = function(e) {
      e.preventDefault();
      window.install.prompt()
        .then(function(outcome) {
          // The user actioned the prompt (good or bad).
          // ga('send', 'event', 'install', outcome);
          root.classList.remove('available');
        })
        .catch(function(installError) {
          // Boo. update the UI.
          // ga('send', 'event', 'install', 'errored');
        });
    };

    var init = function() {
      window.install.canPrompt()
        .then(function() {
            root.classList.add('available');
            // ga('send', 'event', 'install', 'prompted');
        });
    };

    root.addEventListener('click', install.bind(this));
    root.addEventListener('touchend', install.bind(this));

    init();
  };

  var RangoliApp = function(root) {
    // Controls the RangoliApp.

    var rangoliImage = root.querySelector('.aarti');
    var aarti = new Aarti();

    var start = function (e) {
      if(!!e == true) {
        e.preventDefault();

        if(e.touches && e.touches.length > 1) {
          // Multi touch. OFF.
          return false;
        }
      }

      this.start({loop: true});
    }

    var stop = function(e) {
      if(!!e == true) e.preventDefault();
      this.stop();
    }

    // var aarti_playing;
    this.start = function(opts) {
      // Play the sound
      // aarti_playing = 1;
      rangoliImage.classList.add('horning');
      // console.log(aarti);
      aarti.start(opts);

      aarti.onstopped = function() {
        rangoliImage.classList.remove('horning');
      };

      // ga('send', 'event', 'horn', 'play');
    };

    this.stop = function() {
      // Stop the sound
      // aarti_playing = 0;
      rangoliImage.classList.remove('horning');
      aarti.stop();
    };


    // if (aarti_playing === 1) {
    //   rangoliImage.addEventListener('click', stop.bind(this));
    // } else {
    //   rangoliImage.addEventListener('click', start.bind(this));
    // }
    // document.documentElement.addEventListener('mouseup', stop.bind(this));
    rangoliImage.addEventListener('mousedown', start.bind(this));
    rangoliImage.addEventListener('touchstart', start.bind(this));

    document.documentElement.addEventListener('mouseup', stop.bind(this));
    document.documentElement.addEventListener('touchend', stop.bind(this));

  };

(function() {

  var deferredInstall;
  var promptTriggered = false;
  // The resolve function that will be called when we know we can prompt.
  var canPromptPromiseResolved;
  var canPromptPromise = new Promise(function(resolve, reject) {
    // The resolve will be called later when we know the prompt has been shown.
    // We might want to reject after a timeout of a couple of seconds.
    canPromptPromiseResolved = resolve;
  });


  window.addEventListener('beforeinstallprompt',function(e) {

    promptTriggered = true;

    // Stop it doing what it needs to do;
    e.preventDefault();
    deferredInstall = e;

    // Resolve the promise, to say that we know we can prompt.
    canPromptPromiseResolved();

    return false;
  });

  var install = {};

  Object.defineProperty(install, 'isAvailable', { get: function() { return promptTriggered; } });

  install.canPrompt = function() {
    return canPromptPromise;
  };

  install.prompt = function () {
    return new Promise(function(resolve, reject){
      if(promptTriggered === false) {
        // There can be a whole host or reasons, we should determine them
        reject('User Agent decided not to prompt');
      };

      deferredInstall.prompt().then(function() {
        return deferredInstall.userChoice
      }).then(function(choice) {
        resolve(choice.outcome);
      }).catch(function(reason) {
        reject(reason);
      });
    });
  };

  window.install = install;
})();

  window.addEventListener('load', function() {
    var rangoliEl = document.getElementById('rangoli');
    var installEl = document.getElementById('installer');
    var rangoli = new RangoliApp(rangoliEl);
    var installer = new Installer(installEl);

    if(location.hash == '#instant') {
      rangoli.start({ loop: false });
    }

    window.addEventListener('hashchange', function() {
      if(location.hash == '#instant') {
        rangoli.start({ loop: false });
      }
    });

    document.addEventListener('visibilitychange', function() {
      if(document.hidden) {
        rangoli.stop();
      }
    });
  });
})();
